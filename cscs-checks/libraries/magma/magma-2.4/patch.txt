diff -Naur src/testing_cblas_z.cpp src_patched/testing_cblas_z.cpp
--- ./testing_cblas_z.cpp	2018-09-12 17:02:42.000000000 +0200
+++ ./testing_cblas_z.cpp	2018-09-13 18:44:49.000000000 +0200
@@ -14,6 +14,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <math.h>
+#include <ctime>
 
 #ifdef HAVE_CBLAS
 #include <cblas.h>
@@ -104,6 +105,8 @@
 // ----------------------------------------
 int main( int argc, char** argv )
 {
+    std::clock_t start;
+    double duration;
     TESTING_CHECK( magma_init() );
     magma_print_environment();
     
@@ -162,7 +165,8 @@
     printf( "%%                                          Error w.r.t.   Error w.r.t.   Error w.r.t.\n"
             "%%   M     N     K  incx  incy   Function   CBLAS          Fortran BLAS   inline\n"
             "%%====================================================================================\n" );
-    for( int itest = 0; itest < opts.ntest; ++itest ) {
+//ajajajaj    for( int itest = 0; itest < opts.ntest; ++itest ) {
+    for( int itest = 0; itest < opts.ntest; itest+=100 ) {
         if ( itest > 0 ) {
             printf( "%%----------------------------------------------------------------------\n" );
         }
@@ -185,6 +189,7 @@
         lapackf77_zlarnv( &ione, ISEED, &size, A );
         lapackf77_zlarnv( &ione, ISEED, &size, B );
         
+        start = std::clock();
         // ----- test DZASUM
         for( int iincx = 0; iincx < ninc; ++iincx ) {
             magma_int_t incx = inc[iincx];
@@ -383,6 +388,7 @@
             }
         }
         
+        duration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
         // cleanup
         magma_free_cpu( A );
         magma_free_cpu( B );
@@ -391,5 +397,11 @@
     
     opts.cleanup();
     TESTING_CHECK( magma_finalize() );
+    printf("Duration: %f\n", duration);
+    if (gStatus<=1){
+        printf("Result = PASS\n");
+    }else{
+        printf("Result = FAIL\n");
+    }
     return gStatus;
 }
diff -Naur src/testing_zgemm.cpp src_patched/testing_zgemm.cpp
--- ./testing_zgemm.cpp	2018-09-12 17:03:47.000000000 +0200
+++ ./testing_zgemm.cpp	2018-09-13 18:44:49.000000000 +0200
@@ -62,6 +62,7 @@
     
     magma_opts opts;
     opts.parse_opts( argc, argv );
+    opts.lapack=1;
     
     // Allow 3*eps; complex needs 2*sqrt(2) factor; see Higham, 2002, sec. 3.6.
     double eps = lapackf77_dlamch("E");
@@ -87,7 +88,8 @@
                 g_platform_str, g_platform_str );
     #endif
     printf("%%========================================================================================================\n");
-    for( int itest = 0; itest < opts.ntest; ++itest ) {
+//ajajajaj    for( int itest = 0; itest < opts.ntest; ++itest ) {
+    for( int itest = 0; itest < opts.ntest; itest+=100 ) {
         for( int iter = 0; iter < opts.niter; ++iter ) {
             M = opts.msize[itest];
             N = opts.nsize[itest];
@@ -220,6 +222,9 @@
                            cpu_perf,    1000.*cpu_time,
                            magma_error, dev_error,
                            (okay ? "ok" : "failed"));
+                    printf("MAGMA GFlops: %e\n", magma_perf);
+                    printf("cuBLAS GFlops: %e\n", dev_perf);
+                    printf("CPU GFlops: %e\n", cpu_perf);
                 #else
                     bool okay = (dev_error < tol);
                     status += ! okay;
@@ -271,5 +276,10 @@
 
     opts.cleanup();
     TESTING_CHECK( magma_finalize() );
+    if (status==0){
+        printf("Result = PASS\n");
+    }else{
+        printf("Result = FAIL\n");
+    }
     return status;
 }
diff -Naur src/testing_zsymmetrize.cpp src_patched/testing_zsymmetrize.cpp
--- ./testing_zsymmetrize.cpp	2018-09-12 17:04:01.000000000 +0200
+++ ./testing_zsymmetrize.cpp	2018-09-13 18:44:49.000000000 +0200
@@ -125,5 +125,12 @@
 
     opts.cleanup();
     TESTING_CHECK( magma_finalize() );
+    printf("CPU performance: %e\n", cpu_perf);
+    printf("GPU performance: %e\n", gpu_perf);
+    if (status==0){
+        printf("Result = PASS\n");
+    }else{
+        printf("Result = FAIL\n");
+    }
     return status;
 }
diff -Naur src/testing_ztranspose.cpp src_patched/testing_ztranspose.cpp
--- ./testing_ztranspose.cpp	2018-09-12 17:04:11.000000000 +0200
+++ ./testing_ztranspose.cpp	2018-09-13 18:44:49.000000000 +0200
@@ -212,5 +212,12 @@
 
     opts.cleanup();
     TESTING_CHECK( magma_finalize() );
+    printf("CPU performance: %e\n", cpu_perf);
+    printf("GPU performance: %e\n", gpu_perf);
+    if (status==0){
+        printf("Result = PASS\n");
+    }else{
+        printf("Result = FAIL\n");
+    }
     return status;
 }
diff -Naur src/testing_zunmbr.cpp src_patched/testing_zunmbr.cpp
--- ./testing_zunmbr.cpp	2018-09-12 17:04:26.000000000 +0200
+++ ./testing_zunmbr.cpp	2018-09-13 18:44:49.000000000 +0200
@@ -55,7 +55,8 @@
 
     printf("%%   M     N     K   vect side   trans   CPU Gflop/s (sec)   GPU Gflop/s (sec)   ||R||_F / ||QC||_F\n");
     printf("%%==============================================================================================\n");
-    for( int itest = 0; itest < opts.ntest; ++itest ) {
+//ajajajaj    for( int itest = 0; itest < opts.ntest; ++itest ) {
+    for( int itest = 0; itest < opts.ntest; itest+=100 ) {
       for( int ivect = 0; ivect < 2; ++ivect ) {
       for( int iside = 0; iside < 2; ++iside ) {
       for( int itran = 0; itran < 2; ++itran ) {
@@ -224,5 +225,12 @@
     
     opts.cleanup();
     TESTING_CHECK( magma_finalize() );
+    printf("CPU performance: %e\n", cpu_perf);
+    printf("GPU performance: %e\n", gpu_perf);
+    if (status==0){
+        printf("Result = PASS\n");
+    }else{
+        printf("Result = FAIL\n");
+    }
     return status;
 }
